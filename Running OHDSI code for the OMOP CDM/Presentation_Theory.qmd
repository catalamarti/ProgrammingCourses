---
title: "Running OHDSI code for the OMOP CDM"
author: "Marti Catala Sabate"
format:
  revealjs:
    slide-number: true
editor: visual
---

## Catch-up

Yesterday we learnt:

-   To connect to the database.
-   Use CDMConnector.
-   Use Eunomia mock database (or other databases that you have used).
-   Use dplyr commands to manipulate data: %\>%, group_by, ungroup, tally, rename, select, distinct, summarise, show_query, mutate, filter, right_join, left_join, inner_join, full_join, semi_join, anti_join, union, union_all, compute, collect, pull.

## Today's goals

-   Concept set and cohort definitions.
-   Built a concept set using [CodelistGenerator](https://github.com/darwin-eu/CodelistGenerator).
-   Built a cohort definition using [ATLAS](https://academy.ehden.eu/course/view.php?id=8).
-   Instantiate a cohort in the database using [CohortGenerator](https://github.com/OHDSI/CohortGenerator).
-   Evaluate a cohort with [CohortDiagnostics](https://github.com/OHDSI/CohortDiagnostics/).
-   Compute the incidence and prevalence using [IncidencePrevalence](https://github.com/darwin-eu/IncidencePrevalence/).

## Concept set and cohort definitions

### concept set:

Concept sets provides the ability to create collections of logical expres sions that can be used to identify a set of concepts to be used throughout your stan dardized analyses.

Simplification: list of codes.

### cohort definition:

Cohort definitions is the ability to construct a set of persons who satisfy one or more criteria for a duration of time and these cohorts can then serve as the basis of inputs for all of your subsequent analyses.

Simplification: CONCEPT SETS + a certain LOGIC.

## Concept set and cohort definitions

### Example of concept set:

## Concept set and cohort definitions

### Example of cohort definition:

## Let's build a concept set

To so we are going to use CodelistGenerator.

First step, install the package:

```{r, eval = FALSE, echo = TRUE}
install.packages("remotes")
remotes::install_github("darwin-eu/CodelistGenerator")
```

The package has good vignettes that can be very useful to understand how the package and its functions works: <https://darwin-eu.github.io/CodelistGenerator/index.html>

## CodelistGenerator

Example how to build a concept set:

1) Connect to a database (eunomia don't have the full version of the vocabulary, so connect to your own database):

```{r, echo = TRUE, eval = FALSE}
cdm <- cdm_from_con(
  con,
  cdm_schema = "public",
  cdm_tables = tidyselect::all_of(c(
    "concept", "concept_relationship",
    "concept_ancestor",
    "concept_synonym",
    "vocabulary"
  ))
)
```

## CodelistGenerator

We want to build a "pancreatitis" concept set. So let's have a preliminary list of codes:

```{r echo = TRUE, eval = FALSE}
proposed_list <- getCandidateCodes(
  keywords = "pancreatitis",
  domains = "Condition",
  includeDescendants = TRUE,
  searchViaSynonyms = TRUE,
  cdm = cdm
)
```

## CodelistGenerator

We have 57 candidates:
```{r}
preliminary_concept_list <- read.csv(here::here("data", "proposed_list_pancreatitis.csv"))
preliminary_concept_list
```

## Validation

This is just a preliminary list. At this stage we must review the concept list and together with some experts decide which concepts we want to exclude.
In our case we decided to exclude 5 concepts:
```{r}
preliminary_concept_list[c(19,31,39,43,57),]
```
We can update our concept list:
```{r, eval = FALSE, echo = TRUE}
concept_set_pancratitis <- preliminary_concept_list[-c(19,31,39,43,57),]
```
We can create an exportable json file and save it:
```{r}
concept_set_json_pancratitis <- getJsonFileFromConceptList(concept_set_pancratitis, cdm)
writeChar(concept_set_json_pancratitis)
```

## Let's move to ATLAS

Using ATLAS we can build a concept set from the data obtained from
